Database query, result, and value components
---------------------------------------------
The Sparc toolkit interacts with many different types of data stores.  To help
ease integration of data from different sources, there are a series of 
high-level interfaces and components that can be used.

A Query
--------
A query is a simple interface used to store a string that can be used to 
query a database.

>>> from zope.component import createObject
>>> query = createObject(u"sparc.db.query", u"a simple query string")

>>> from sparc.db import IQuery
>>> IQuery.providedBy(query)
True

Query strings need to be unicode
>>> from zope.schema import ValidationError
>>> try:
...     createObject(u"sparc.db.query", "an invalid non-unicode string")
...     assert False
... except ValidationError:
...     pass

A Result Value
---------------
A result value is the value associated with a single query result.  For
tabular databases, this would be the value of a single cell (that does not
contain a multi-value attribute).

we'll just test our factory and the provided interface
>>> from sparc.db import IResultValue
>>> my_value = createObject(u'sparc.db.result_value', u'this is a value')
>>> my_value
'this is a value'
>>> unicode(my_value)
u'this is a value'
>>> IResultValue.providedBy(my_value)
True

A Result Multi-value
---------------------
Some query results might contains a multi-value.

>>> from sparc.db import IResultMultiValue
>>> my_multi_value = createObject(u'sparc.db.result_multi_value',
... 				[u'value 1', u'value 2'])
>>> list(my_multi_value)
['value 1', 'value 2']
>>> IResultMultiValue.providedBy(my_multi_value)
True

A Query Event
--------------
It is sometimes usefull to represent a query as a Sparc event, in essance
this will be a point in time query with results.  In order to test this,
we'll need to simulate results.  This requires some implementation of 
IQueryResultSet, we'll use the sparc.db.splunk package for this purpose.

First, let's create our results set
>>> from sparc.db import IQueryResultSet
>>> from sparc.db.splunk.tests import mock_result_stream
>>> response = mock_result_stream()
>>> results = IQueryResultSet(response)

We can now start to create our required kwargs for a query event creation, we
start with the query and results
>>> kwargs = {'query': query, 'results': results}

We also need to provide additional arguments to satisfy the sparc.event.IEvent
and sparc.entity.IEntity interfaces as well.

>>> from datetime import datetime
>>> kwargs['datetime'] = datetime(2016, 1, 1, 0, 0)
>>> kwargs['id'] = str(hash(query.query + str(kwargs['datetime'])))
>>> kwargs['name'] = u'A query event'
>>> kwargs['description'] = u'A query event description'

We're now ready to create our query event
>>> from sparc.db import IQueryEvent
>>> query_event = createObject(u'sparc.db.query_event', **kwargs)
>>> IQueryEvent.providedBy(query_event)
True

Let's check our object's functions
>>> query_event.getId()
'-1697405257974171195'
>>> query_event.name
u'A query event'
>>> query_event.query
u'a simple query string'
>>> entry = list(query_event)[0]
>>> entry['identity']
'user1'